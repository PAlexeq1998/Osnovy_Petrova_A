#include <stdio.h>

int sstrlen(const char * arr){
    int len = 0;
    for(len = 0; arr[len] != 0; ++len);
    return len;
}

int ggetline(FILE* in, char *buffer){
    char c;
    int i = 0;
    buffer[i] = 0;
    while ((c = fgetc(in)) != EOF && c != '\n'){
        buffer[i] = c;
        ++i;
    }
    buffer[i] = 0;
    if (c == EOF){
        return 0;
    }
    return 1;
}

int strequal(const char* a, const char *b){
    if(strlen(a) != strlen(b)){
        return 0;
    }
    else{
        int i;
        for(i = 0; a[i] != 0 && b[i] != 0; ++i){
            if(a[i] != b[i]){
                return 0;
            }
        }
    }
    return 1;
}


typedef struct{
    char file_name[32];
    char define_name[32];
    char value[32];
}Define;



void sstrcpy(char *a, const char *b){
    int i;
    for(i = 0; b[i] != 0; ++i){
        a[i] = b[i];
    }
    a[i] = 0;
}

int find(Define* defines, int *cnt, const char* val){
    for(int i = 0; i < *cnt; ++i){
        if(strequal(defines[i].define_name, val)){
            return i;
        }
    }
    return -1;
}


void parceLine(Define* defines, int *cnt, FILE* result, const char* fname, const char* buffer){
    int tmplen;
    int i;
    FILE* ss = fopen("tmp","w");
    fprintf(ss, "%s", buffer);
    fclose(ss);
    ss = fopen("tmp","r");
    char word[32];
    while(!feof(ss) && fscanf(ss, "%s",word) == 1){
        if(strequal(word,"#define")){
            fprintf(result, "%s ", word);
            sstrcpy(defines[*cnt].file_name, fname);
            fscanf(ss, "%s",defines[*cnt].define_name);
            fprintf(result, "%s ", defines[*cnt].define_name);
            ggetline(ss, defines[*cnt].value);
            fprintf(result, "%s ", defines[*cnt].value);
            tmplen = sstrlen(defines[*cnt].value) - 1;
            for(i = 0; i < tmplen; ++i){
                if(defines[*cnt].value[i] == '/' && (defines[*cnt].value[i + 1] == '/' || defines[*cnt].value[i + 1] == '*')){
                    defines[*cnt].value[i] = 0;
                }
            }
            (*cnt)++;
            break;
        }
        else{
            int res = find(defines, cnt, word);
            if(res != -1){
                fprintf(result, "%s ", defines[res].value);
            }
            else{
                fprintf(result, "%s ", word);
            }
        }
    }
    fclose(ss);
}

void copyFiles(const char *a, const char *b){
    FILE *aa = fopen(a, "r");
    FILE *bb = fopen(b, "w");
    char ch;
    while ((ch = fgetc(aa)) != EOF)
        fputc(ch, bb);
    fclose(aa);
    fclose(bb);
}

void readFromFile(Define* defines, int *cnt, const char* fname){
    FILE* in = fopen(fname, "r");
    char buffer[128];
    FILE* result = fopen("rtmp", "w");
    while(ggetline(in, buffer)){
        if(buffer[0] != 0){
            parceLine(defines, cnt, result, fname, buffer);
            fprintf(result, "\n");
        }
    }
    fclose(in);
    fclose(result);
    copyFiles("rtmp", fname);
    
}

int main(){
    int files_cnt;
    printf("Files: ");
    scanf("%d",&files_cnt);
    char file_names[10][32];
    printf("Enter %d file names:\n", files_cnt);
    for(int i = 0; i < files_cnt; ++i){
        scanf("%s", file_names[i]);
    }
    Define defines[20];
    int defines_cnt = 0;
    
    for(unsigned i = 0; i < files_cnt; ++i){
        readFromFile(defines, &defines_cnt, file_names[i]);
        
    }
    FILE *ff = fopen("data.bin", "wb");
    fwrite(defines, sizeof(Define), defines_cnt, ff);
    fclose(ff);
    
}
